name: Build and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_extension: ""
          - os: macos-latest
            artifact_extension: ""
          - os: windows-latest
            artifact_extension: ".exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Determine build environment and version
        id: determine_version
        shell: bash
        run: |
          # You may need to adjust this to match your actual version source
          BASE_VERSION="1.0.0"
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            ENV="dev"
            SUFFIX="-dev${{ github.event.pull_request.number }}"
            VERSION="$BASE_VERSION$SUFFIX"
          elif [ "${{ github.event_name }}" = "push" ]; then
            ENV="beta"
            SUFFIX="-beta${{ github.run_number }}"
            VERSION="$BASE_VERSION$SUFFIX"
          elif [ "${{ github.event_name }}" = "release" ]; then
            ENV="prod"
            VERSION="$BASE_VERSION"
          else
            ENV="dev"
            SUFFIX="-dev"
            VERSION="$BASE_VERSION$SUFFIX"
          fi

          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build executable
        run: |
          pyinstaller --onefile --add-data "PICO_CODE;PICO_CODE" --add-data "logo.png;." --icon=icon.ico --name "WarpedPinballProgrammer" main.py
        shell: bash

      - name: Upload executable artifact
        uses: actions/upload-artifact@v3
        with:
          name: WarpedPinballProgrammer-${{ matrix.os }}
          path: dist/WarpedPinballProgrammer${{ matrix.artifact_extension }}

      # Create (or update) a single pre-release for PRs and pushes to main
      - name: Create or Update Pre-Release
        if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          body: |
            Build Type: ${{ env.ENV }}
            Version: ${{ env.VERSION }}
            ${{ github.event_name == 'pull_request' && format('PR: {0}', github.event.pull_request.html_url) || '' }}
            ${{ github.event_name == 'pull_request' && format('Branch: {0}', github.event.pull_request.head.ref) || '' }}
          prerelease: true
          files: dist/WarpedPinballProgrammer${{ matrix.artifact_extension }}
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Only run this step once to avoid concurrent release creation issues
        if: ${{ matrix.os == 'ubuntu-latest' }}

      # Attach executable to the official GitHub Release if it's a "published" release
      - name: Upload artifact to GitHub Release
        uses: softprops/action-gh-release@v2
        if: ${{ github.event_name == 'release' }}
        with:
          files: dist/WarpedPinballProgrammer${{ matrix.artifact_extension }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}